---
- name: Download and Install Go & Purge Old Go
  when: ansible_machine == 'arm64'
  vars:
    go_version: 1.21.0
    go_sha256: 3aca44de55c5e098de2f406e98aba328898b05d509a2e2a356416faacf2c4566  # yamllint disable-line rule:line-length
    go_archive_name: "go{{ go_version }}.darwin-arm64"
    go_opt_dir: "{{ ansible_user_dir }}/opt/go-{{ go_version }}"  # yamllint disable-line rule:line-length

    go_packages:
      - package_name: golang.org/x/tools/gopls
        binary_name: gopls
  environment:
    GOPATH: "{{ go_opt_dir }}"
  block:
    - name: Download Go tar
      ansible.builtin.get_url:
        # https://go.dev/dl/
        url: "https://go.dev/dl/{{ go_archive_name }}.tar.gz"
        checksum: "sha256:{{ go_sha256 }}"
        dest: "/tmp/{{ go_archive_name }}.tar.gz"
        mode: "755"

    - name: Ensure opt folder
      ansible.builtin.file:
        state: directory
        path: "{{ go_opt_dir }}/{{ go_archive_name }}"
        mode: "755"

    - name: Unarchive Go tar
      ansible.builtin.unarchive:
        src: "/tmp/{{ go_archive_name }}.tar.gz"
        dest: "{{ go_opt_dir }}/{{ go_archive_name }}"
        remote_src: true
        creates: "{{ go_opt_dir }}/{{ go_archive_name }}/go/bin/go"
        mode: "755"

    - name: Ensure bin folder
      ansible.builtin.file:
        state: directory
        path: "{{ ansible_user_dir }}/bin"
        mode: "755"

    - name: Link Go Binaries
      ansible.builtin.file:
        state: link
        src: "{{ item }}"
        dest: "{{ ansible_user_dir }}/bin/{{ item | basename }}"
      with_fileglob:
        - "{{ go_opt_dir }}/{{ go_archive_name }}/go/bin/*"

    - name: Install Go Packages
      ansible.builtin.command:
        cmd: "go install {{ item.package_name }}@latest"
      register: result
      changed_when: result.stderr != ""
      loop: "{{ go_packages }}"

    - name: Link Go Package Binaries
      ansible.builtin.file:
        state: link
        src: "{{ go_opt_dir }}/bin/{{ item.binary_name }}"
        dest: "{{ ansible_user_dir }}/bin/{{ item.binary_name }}"
      loop: "{{ go_packages }}"

    - name: Find Old Go
      ansible.builtin.find:
        paths: "{{ ansible_user_dir }}/opt"
        pattern: "go-*"
        file_type: directory
      register: old_gos

    - name: Purge Old Go
      ansible.builtin.file:
        state: absent
        path: "{{ item.path }}"
      vars:
        paths_to_keep:
          - "{{ go_opt_dir }}"
      when: item.path not in paths_to_keep
      loop: "{{ old_gos.files }}"
